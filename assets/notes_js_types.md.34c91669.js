import{_ as s,c as n,o as a,a as l}from"./app.bfa3cc41.js";const A=JSON.parse('{"title":"数据类型","description":"","frontmatter":{"prev":false,"next":false},"headers":[{"level":2,"title":"基本数据","slug":"基本数据","link":"#基本数据","children":[]},{"level":2,"title":"引用数据","slug":"引用数据","link":"#引用数据","children":[]},{"level":2,"title":"区别","slug":"区别","link":"#区别","children":[]},{"level":2,"title":"类型判断","slug":"类型判断","link":"#类型判断","children":[{"level":3,"title":"typeof","slug":"typeof","link":"#typeof","children":[]},{"level":3,"title":"instanceof","slug":"instanceof","link":"#instanceof","children":[]},{"level":3,"title":"Array.isArray()","slug":"array-isarray","link":"#array-isarray","children":[]},{"level":3,"title":"Object.prototype.toString()","slug":"object-prototype-tostring","link":"#object-prototype-tostring","children":[]}]}],"relativePath":"notes/js/types.md","lastUpdated":1679322795000}'),o={name:"notes/js/types.md"},p=l(`<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-hidden="true">#</a></h1><h2 id="基本数据" tabindex="-1">基本数据 <a class="header-anchor" href="#基本数据" aria-hidden="true">#</a></h2><p><em>Primitive Values 原始值</em></p><ul><li>string</li><li>number</li><li>boolean</li><li>undefined</li><li>null</li><li>Symbol</li><li>BigInt</li></ul><h2 id="引用数据" tabindex="-1">引用数据 <a class="header-anchor" href="#引用数据" aria-hidden="true">#</a></h2><p><em>Reference values / Objects 对象</em></p><p>几乎所有通过 <code>new KeywordCtor()</code> 创建的数据结构：</p><p><code>Object</code> 、 <code>Array</code> 、 <code>Function</code> 、 <code>Map/WeakMap</code> 、 <code>Set/WeakSet</code> 、 <code>Date</code> 、 <code>RegExp</code> 等</p><h2 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-hidden="true">#</a></h2><ul><li><p>基本数据占据内存空间固定并存储在<strong>堆栈（Stack）</strong> 中, <strong>按值（by value）</strong> 访问, 查询速度较快</p></li><li><p>引用数据占据内存空间更多且不固定并存储于<strong>堆（Heap）</strong> 中，<strong>按引用（by reference）</strong> 访问，即内存中存储对象的引用地址 / 指针，查询速度较慢。</p></li></ul><img class="d-img__center" src="https://cdn.JsDelivr.net/gh/donggua-nor/picture-lib/blog/js_values_stored.png"><ul><li>基本数据仅保存原始值，而引用数据的对象一般拥有相应的<strong>属性或方法</strong>。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>原始值被当作构造函数创建的一个对象来使用时，JavaScript 会将其转换为一个对象，以便可以使用对象的特性，而后抛弃对象性质，并将它变回原始值</p></div><p>来看一个简单的示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;primitive&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 9</span></span>
<span class="line"><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// primitive</span></span>
<span class="line"></span></code></pre></div><p><code>str</code> 是一个基本数据类型的原始值，并不存在 <code>.length</code> 属性或 <code>.toString()</code> 方法。</p><p>但实际执行时相当于使用其包装类进行转换后的对象，因此将不会报错并得出预期结果：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;primitive&#39;</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 9</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// primitive</span></span>
<span class="line"></span></code></pre></div><h2 id="类型判断" tabindex="-1">类型判断 <a class="header-anchor" href="#类型判断" aria-hidden="true">#</a></h2><h3 id="typeof" tabindex="-1">typeof <a class="header-anchor" href="#typeof" aria-hidden="true">#</a></h3><ul><li>除 <code>null</code> 外，正确返回基本数据类型</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;str&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// string;</span></span>
<span class="line"><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// number</span></span>
<span class="line"><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// boolean</span></span>
<span class="line"><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// symbol</span></span>
<span class="line"><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">BigInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// bigint</span></span>
<span class="line"></span></code></pre></div><ul><li>除 <code>Function</code> 对象外，引用数据均返回 <code>object</code></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">log</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// function</span></span>
<span class="line"><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Map</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// object</span></span>
<span class="line"><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">WeakMap</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// object</span></span>
<span class="line"><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Set</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// object</span></span>
<span class="line"><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">WeakSet</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// object</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"></span></code></pre></div><ul><li><code>typeof null === &#39;object&#39;</code></li></ul><p>在 JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 0。由于 null 代表的是空指针（大多数平台下值为 <strong><code>0x00</code></strong>），因此，null 的类型标签是 0，typeof null 也因此返回 &quot;object&quot;</p><p>参阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null" target="_blank" rel="noreferrer">typeof | MDN</a></p><h3 id="instanceof" tabindex="-1">instanceof <a class="header-anchor" href="#instanceof" aria-hidden="true">#</a></h3><p>通过原型链检测对象是否是构造函数的实例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">man</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">man</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">instanceof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>instanceof</code> 并不完全可靠，因为 <code>Person.prototype</code> 属性的值是可以被修改的</p></div><h3 id="array-isarray" tabindex="-1">Array.isArray() <a class="header-anchor" href="#array-isarray" aria-hidden="true">#</a></h3><p>判断是否是数组</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">([]) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;str&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在检测数组时，相对于 <code>instanceof</code> ，该方法可检测 <code>iframes</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">iframe</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;iframe&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">iframe</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">xArray</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">frames</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">frames</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">Array</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">xArray</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// [1,2,3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">instanceof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"></span></code></pre></div></div><h3 id="object-prototype-tostring" tabindex="-1">Object.prototype.toString() <a class="header-anchor" href="#object-prototype-tostring" aria-hidden="true">#</a></h3><p>采用借用 <code>Function.prototype.call/apply()</code> 的形式调用，返回 <code>[object type]</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">toString</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">toString</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">toString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;str&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// [object String]</span></span>
<span class="line"><span style="color:#E5C07B;">toString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Date</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">// [object Date]</span></span>
<span class="line"><span style="color:#E5C07B;">toString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">({}) </span><span style="color:#7F848E;font-style:italic;">// [object Object]</span></span>
<span class="line"><span style="color:#E5C07B;">toString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Math</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// [object Math]</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在确保没有覆盖 <code>toString()</code> 方法的情况下，采用这种方式检测对象类型是最可靠的</p></div>`,39),e=[p];function t(c,r,B,y,i,d){return a(),n("div",null,e)}const C=s(o,[["render",t]]);export{A as __pageData,C as default};
