import{_ as t,M as o,p as i,q as l,R as e,t as n,N as a,a1 as r}from"./framework-fa6fd9c7.js";const c={},d=e("h1",{id:"介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),n(" 介绍")],-1),h=e("h2",{id:"参考",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),n(" 参考")],-1),u=e("p",null,[n("本篇为笔者经历一定的 "),e("code",null,"Vue"),n(" 项目实战后，在期望深入与面试驱动共同推动下，多方面参考学习总结而来")],-1),p={href:"https://github.com/ustbhuangyi",target:"_blank",rel:"noopener noreferrer"},m={href:"https://coding.imooc.com/learn/list/228.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/wangtunan",target:"_blank",rel:"noopener noreferrer"},v={href:"https://wangtunan.github.io/blog/vueAnalysis/introduction/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/HcySunYang",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/HcySunYang/vue-design",target:"_blank",rel:"noopener noreferrer"},g=r(`<h2 id="主要目录" tabindex="-1"><a class="header-anchor" href="#主要目录" aria-hidden="true">#</a> 主要目录</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span>
├── dist              <span class="token comment"># 构建结果目录</span>
├── scripts           <span class="token comment"># Rollup 构建配置、工程化脚本</span>
├── src               <span class="token comment">#</span>
│   ├── compiler      <span class="token comment"># 编译相关</span>
│   ├── core          <span class="token comment"># 核心源码</span>
│   ├── platforms     <span class="token comment"># 跨平台（web、weex）</span>
│   ├── server        <span class="token comment"># 服务端端渲染相关</span>
│   ├── sfc           <span class="token comment"># .vue 文件解析逻辑</span>
│   └── shared        <span class="token comment"># 通用工具函数</span>
└── <span class="token builtin class-name">test</span>              <span class="token comment"># e2e、单元测试用例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dist" tabindex="-1"><a class="header-anchor" href="#dist" aria-hidden="true">#</a> dist</h3>`,3),k={href:"https://cn.vuejs.org/v2/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"Vue",-1),E={href:"https://rollupjs.org/guide/zh/",target:"_blank",rel:"noopener noreferrer"},A=e("code",null,"Rollup",-1),V=r('<h3 id="scripts" tabindex="-1"><a class="header-anchor" href="#scripts" aria-hidden="true">#</a> scripts</h3><p>由 <code>Rollup</code> 构建配置， <code>Git</code> 提交校验脚本， <code>Shell</code> 发布脚本组成</p><p>完成不同构建版本的打包，代码更新提交，版本更新发布</p><h3 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> test</h3><p>自动化测试，使用 <code>nightwatch</code> 、 <code>karma</code> 、 <code>jasmine</code> 进行端到端测试、单元测试、服务端渲染测试</p><p>可通过单元测试了解一些晦涩难懂的 API 运行结果</p><h3 id="src-源码目录" tabindex="-1"><a class="header-anchor" href="#src-源码目录" aria-hidden="true">#</a> src 源码目录</h3><h4 id="compiler" tabindex="-1"><a class="header-anchor" href="#compiler" aria-hidden="true">#</a> compiler</h4><p>包含编译相关的相关，主要是将模板 <code>template</code> 编译成 <code>render</code> 函数的实现逻辑</p>',9),B={href:"https://cn.vuejs.org/v2/guide/installation.html#%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6",target:"_blank",rel:"noopener noreferrer"},D={href:"https://cli.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/vuejs/create-vue",target:"_blank",rel:"noopener noreferrer"},M={href:"https://cn.vitejs.dev/",target:"_blank",rel:"noopener noreferrer"},C=e("code",null,".vue",-1),O={href:"https://vue-loader.vuejs.org/zh/spec.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://vue-loader.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},S=e("strong",null,"运行时",-1),F=e("code",null,"runtime-only",-1),y={href:"https://cli.vuejs.org/zh/config/#runtimecompiler",target:"_blank",rel:"noopener noreferrer"},z=e("strong",null,"包含运行时编译器",-1),q=e("code",null,"runtime + compiler",-1),I=r(`<h4 id="core" tabindex="-1"><a class="header-anchor" href="#core" aria-hidden="true">#</a> core</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span>
├── core
│   ├── components   <span class="token comment"># 通用内置组件 keep-alive</span>
│   ├── global-api   <span class="token comment"># 全局 API 如 Vue.use 实现</span>
│   ├── instance     <span class="token comment"># 包含 vue 组件实例完整的生命周期相关源码实现</span>
│   ├── observer     <span class="token comment"># 核心响应式原理的实现</span>
│   ├── util         <span class="token comment"># 各类工具函数, nextTick、mergeOptions</span>
│   └── vdom         <span class="token comment"># 虚拟 DOM 抽象创建及 Diff</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="platforms" tabindex="-1"><a class="header-anchor" href="#platforms" aria-hidden="true">#</a> platforms</h4>`,3),N=e("code",null,"Vue2.0",-1),R={href:"http://doc.weex.io/zh/",target:"_blank",rel:"noopener noreferrer"},H=r('<p>在此目录下， <code>Vue</code> 将对应平台的代码划分放置于对应的 <code>web</code> ， <code>weex</code> 目录下</p><h4 id="server" tabindex="-1"><a class="header-anchor" href="#server" aria-hidden="true">#</a> server</h4><p>服务端渲染相关，主要的工作是把组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将静态标记&quot;混合&quot;为客户端上完全交互的应用程序</p><h4 id="sfc" tabindex="-1"><a class="header-anchor" href="#sfc" aria-hidden="true">#</a> sfc</h4>',4),T={href:"https://vue-loader.vuejs.org/zh/spec.html",target:"_blank",rel:"noopener noreferrer"},L=e("code",null,".vue",-1),P=r('<h4 id="shared" tabindex="-1"><a class="header-anchor" href="#shared" aria-hidden="true">#</a> shared</h4><p>全局通用的常量文件及工具函数</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h3 id="vue-核心思想" tabindex="-1"><a class="header-anchor" href="#vue-核心思想" aria-hidden="true">#</a> Vue 核心思想</h3><p><strong>渐进式框架</strong>、<strong>数据驱动</strong>、<strong>组件化</strong></p><h3 id="virtual-dom" tabindex="-1"><a class="header-anchor" href="#virtual-dom" aria-hidden="true">#</a> Virtual DOM</h3><p>虚拟 DOM 是对于真实 DOM 的抽象描述，其作用是为了<strong>便于最小化找出更新差异并由此优化性能</strong>，更重要的是<strong>提供了一种低成本实现跨平台的方式</strong>。</p><p>但虚拟 DOM 的性能并不一定优于直接使用真实 DOM，创建虚拟 DOM 需要额外的内存消耗，Diff 过程也有一定开销。</p><p>使用虚拟 DOM 是一种合理的优化权衡，为的是通过虚拟 DOM 抹除不同平台的差异性，减少频繁或者大规模的原生操作，并提供相对不错的一个性能下限。</p>',9),Y={class:"custom-container tip"},G=e("p",{class:"custom-container-title"},"TIP",-1),J=e("code",null,"Vue",-1),K={href:"https://github.com/snabbdom/snabbdom",target:"_blank",rel:"noopener noreferrer"};function Q(U,W){const s=o("ExternalLinkIcon");return i(),l("div",null,[d,h,u,e("ul",null,[e("li",null,[e("a",p,[n("@黄轶老师"),a(s)]),n(" - "),e("a",m,[n("Vue.js 源码全方位深入解析"),a(s)])]),e("li",null,[e("a",_,[n("@wangtunan"),a(s)]),n(" - "),e("a",v,[n("Vue2.0 源码分析"),a(s)])]),e("li",null,[e("a",b,[n("@HcySunYang"),a(s)]),n(" - "),e("a",f,[n("vue-design"),a(s)])])]),g,e("blockquote",null,[e("p",null,[e("a",k,[n("对不同构建版本的解释"),a(s)])])]),e("p",null,[x,n(" 源码是基于 "),e("a",E,[n("Rollup"),a(s)]),n(" 构建的，在此目录下存放 "),A,n(" 构建的对应版本文件")]),V,e("blockquote",null,[e("p",null,[e("a",B,[n("运行时-编译器-vs-只包含运行时"),a(s)])])]),e("p",null,[n("通过 "),e("a",D,[n("vue-cli"),a(s)]),n("（目前已新增 "),e("a",j,[n("create-vue"),a(s)]),n("、"),e("a",M,[n("Vite"),a(s)]),n("）创建的项目，以 "),C,n(" 文件的 "),e("a",O,[n("SFCs"),a(s)]),n(" 单文件组件形式开发，通过 "),e("a",w,[n("vue-loader"),a(s)]),n(" 结合打包工具在构建时进行预编译。")]),e("p",null,[n("因此日常开发使用的是 "),S,n(),F,n(" 版本。可通过开启 "),e("a",y,[n("runtimeCompiler"),a(s)]),n(" 使用 "),z,n(" 的 "),q,n(" 版本。")]),I,e("p",null,[N,n(" 提供了跨平台的能力，如 "),e("a",R,[n("weex"),a(s)]),n("。")]),H,e("p",null,[n("将 "),e("a",T,[n("SFCs"),a(s)]),n(" 形式的 "),L,n(" 文件解析成 JavaScript 对象的实现逻辑")]),P,e("div",Y,[G,e("p",null,[J,n(" 中的虚拟 DOM 借鉴了 "),e("a",K,[n("snabbdom"),a(s)]),n(" 的实现并进行拓展")])])])}const Z=t(c,[["render",Q],["__file","index.html.vue"]]);export{Z as default};
