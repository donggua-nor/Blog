import{_ as s,c as n,o as a,e as l}from"./app.c1b4a40c.js";const A=JSON.parse('{"title":"ES Module","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":2,"title":"export","slug":"export","link":"#export","children":[]},{"level":2,"title":"import","slug":"import","link":"#import","children":[]},{"level":2,"title":"特性与运用","slug":"特性与运用","link":"#特性与运用","children":[]},{"level":2,"title":"import 加载机制","slug":"import-加载机制","link":"#import-加载机制","children":[{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]},{"level":3,"title":"debugger 验证","slug":"debugger-验证","link":"#debugger-验证","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"notes/node/esm.md","lastUpdated":1682126138000}'),p={name:"notes/node/esm.md"},o=l(`<h1 id="es-module" tabindex="-1">ES Module <a class="header-anchor" href="#es-module" aria-hidden="true">#</a></h1><p>ES6 新增的模块化方案，将逐步取代 <a href="./cjs.html">CommonJS</a> 等规范，成为未来浏览器与服务器通用的模块解决方案</p><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-hidden="true">#</a></h2><ul><li><code>export</code> 导出</li><li><code>import ... from $path</code> 导入</li></ul><h2 id="export" tabindex="-1">export <a class="header-anchor" href="#export" aria-hidden="true">#</a></h2><p><code>export</code> 定义对外接口，导出模块内部变量/方法/类</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span></code></pre></div><ul><li>可使用关键词 <code>as</code> 对变量/方法/类重命名</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"></span></code></pre></div><ul><li>不可对变量进行重复导出</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;"> } </span><span style="color:#7F848E;font-style:italic;">// Duplicate export of &#39;val&#39;</span></span>
<span class="line"></span></code></pre></div><ul><li>应注意 <code>export</code> 应提供对外接口，即需要显式声明</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Unexpected token &#39;export&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 缺乏声明，相当于直接导出值，而不是接口</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Declaration or statement expected</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 声明语句没有紧跟着export，所以这里相当于直接输出变量的值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 可使用 export { val }; 修正</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>export default</strong></li></ul><p>语义化标准，用于导出模块的默认值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// OR</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() { ... }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// OR</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;"> { ... }</span></span>
<span class="line"></span></code></pre></div><p>需要注意的是， <code>export default</code> 相当于导出模块的 <code>default</code> 变量， 因此后面不能紧跟声明语句 同时模块的默认值有且只有一个，因此不能重复输出</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">repeatVal</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Identifier &#39;.default&#39; has already been declared</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">test</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Unexpected token &#39;const&#39;</span></span>
<span class="line"></span></code></pre></div><p>不同于 <code>export</code> ， <code>export default</code> 可以将模块整体导出，以便导入使用时不需要指定与 <code>export</code> 对应的变量名</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// utils.js</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">utils</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./utils&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span></span>
<span class="line"><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre></div><p>相当于</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// utils.js</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">utils</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./utils&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 注意这里 utils 需要用 {} 包裹，且变量名必须与 export 导出的一致</span></span>
<span class="line"><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span></span>
<span class="line"><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre></div><ul><li>结合使用</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">cloneDeep</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;lodash&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">_</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cloneDeep</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">cloneDeep</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="import" tabindex="-1">import <a class="header-anchor" href="#import" aria-hidden="true">#</a></h2><p><code>import</code> 用于加载模块的对外接口</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./utils&#39;</span></span>
<span class="line"></span></code></pre></div><p>与 <code>export</code> 相同，可使用关键词 <code>as</code> 对导入的变量重命名</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./utils&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre></div><p>对于非 <code>export default</code> 导出的模块想要进行整体加载，可以使用 <code>*</code> 配合 <code>as</code> 指定加载整个模块</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// utils.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">utils</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./utils&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre></div><p>在加载完成后，import 语句会执行所加载的模块，可以借用这个特性，将项目初始化方法封装抽离</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// bootstrap.js</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./bootstrap&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// utils</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// main</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">print</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./utils&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>import</code> 命令带有提升作用</p></div><h2 id="特性与运用" tabindex="-1">特性与运用 <a class="header-anchor" href="#特性与运用" aria-hidden="true">#</a></h2><ul><li>组合使用<code>export</code> 、<code>import</code> 进行模块转发</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">utils</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 相当于</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">utils</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./utils&#39;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">utils</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"></span></code></pre></div><p>不同于第二种写法，第一种写法在模块中不能使用 <code>utils</code></p><ul><li>浏览器加载 使用 <code>script</code> 标签加载 ESM 时，需要声明 <code>type</code> 属性</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;module&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">scr</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;./utils.js&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">{</span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>带有 <code>type=&quot;module&quot;</code> 属性的脚本将被异步执行，不会堵塞浏览器渲染</p></div><p>为了浏览器兼容性加载，还可以使用 <code>type=&quot;nomudole&quot;</code> 告知浏览器加载对应支持的标准模块</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt; </span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;module&quot;</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">scr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;./esm.js&quot;</span><span style="color:#ABB2BF;"> &gt; &lt; /script&gt; &lt;</span></span>
<span class="line"><span style="color:#ABB2BF;">script type = &quot;nomodule&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">scr = &quot;./cjs.js&quot; &gt; &lt; /script&gt;</span></span>
<span class="line"></span></code></pre></div><p>对于不支持 <code>ES Module</code> 的浏览器，标识有 <code>type=&quot;module&quot;</code> 的脚本将不会被执行，反之同理</p><ul><li>import() 动态加载</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$path</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">/* to do */</span><span style="color:#ABB2BF;"> ).</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">/* err handle */</span><span style="color:#ABB2BF;"> );</span></span>
<span class="line"></span></code></pre></div><ol><li>按需加载</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$path</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(...));</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>条件加载</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">condition</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$path_A</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(...);</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$path_B</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(...);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li>动态路径</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">condition</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">$path_A</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">$path_B</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(...)</span></span>
<span class="line"></span></code></pre></div><h2 id="import-加载机制" tabindex="-1">import 加载机制 <a class="header-anchor" href="#import-加载机制" aria-hidden="true">#</a></h2><h3 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// utils.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">utils</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./utils.mjs&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">1500</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出结果</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"></span></code></pre></div><p>从输出结果可以看出，当 <code>utils</code> 模块内数据发生变化， <code>main</code> 模块中引用的数据也将同步变化</p><h3 id="debugger-验证" tabindex="-1">debugger 验证 <a class="header-anchor" href="#debugger-验证" aria-hidden="true">#</a></h3><div class="tip custom-block"><p class="custom-block-title">debugger 流程：</p><ol><li>执行 <code>node --inspect-brk=9229 main</code> 命令</li><li>在<strong>chrome</strong>浏览器中打开 <code>chrome://inspect</code> 并点击 <code>Remote Target</code> 中的 <code>main(文件名)</code> 标识的<code>inspect</code></li></ol><blockquote><p><code>--inspect-brk</code> 用于首行开始 debugger，否则用 <code>--inspect</code> 。 <code>9229</code> 为指定端口号</p></blockquote></div><p><img src="https://cdn.JsDelivr.net/gh/donggua-nor/picture-lib//blog/node_debug_esm.png" alt="node_debug_esm"></p><p>在项目初始化时， <code>utils</code> 模块内容就已经被加载，而此时 <code>main</code> 模块还未开始加载</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li><code>ES Module</code> 属于编译时加载</li><li><code>ES Module</code> 是异步加载</li><li><code>import</code> 是对模块接口中值的引用，模块内的数据变化将影响外部引用数据</li></ul>`,63),e=[o];function t(c,r,B,y,i,d){return a(),n("div",null,e)}const C=s(p,[["render",t]]);export{A as __pageData,C as default};
