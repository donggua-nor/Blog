import{_ as p,M as t,p as o,q as c,R as n,t as s,N as l,a1 as a}from"./framework-e93b08cb.js";const i={},r=a(`<h1 id="对象的拷贝" tabindex="-1"><a class="header-anchor" href="#对象的拷贝" aria-hidden="true">#</a> 对象的拷贝</h1><p>由于 JavaScript 中对象是引用数据类型，访问、操作对象实际上就是对其内存地址上的数据进行读写操作。在开发中执行拷贝对象并进行修改时，便需要根据场景需求注意对原对象数据的影响。</p><h2 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h2><p>浅拷贝只会对一层对象开辟新的内存空间进行存放，对于嵌套对象的深层属性仍是原来的引用地址。</p><h3 id="object-assign" tabindex="-1"><a class="header-anchor" href="#object-assign" aria-hidden="true">#</a> Object.assign()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;donggua&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span>
newObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;_donggua&#39;</span>
newObj<span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token operator">++</span>

obj <span class="token comment">// { name: &#39;donggua&#39;, props: { value: 2 } }</span>
newObj <span class="token comment">// { name: &#39;_donggua&#39;, props: { value: 2 } }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-prototype-concat" tabindex="-1"><a class="header-anchor" href="#array-prototype-concat" aria-hidden="true">#</a> Array.prototype.concat()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> ary <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>

arr <span class="token comment">// [1, 2, 3, [1, 5]];</span>
ary <span class="token comment">// [4, 2, 3, [1, 5]];</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-prototype-slice" tabindex="-1"><a class="header-anchor" href="#array-prototype-slice" aria-hidden="true">#</a> Array.prototype.slice()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> ary <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>

arr <span class="token comment">// [1, 2, 3, [1, 5]];</span>
ary <span class="token comment">// [4, 2, 3, [1, 5]];</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="es6-扩展运算符" tabindex="-1"><a class="header-anchor" href="#es6-扩展运算符" aria-hidden="true">#</a> ES6 扩展运算符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;donggua&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>obj
<span class="token punctuation">}</span>
newObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;_donggua&#39;</span>
newObj<span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token operator">++</span>

obj <span class="token comment">// { name: &#39;donggua&#39;, props: { value: 2 } }</span>
newObj <span class="token comment">// { name: &#39;_donggua&#39;, props: { value: 2 } }</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span>
ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>

arr <span class="token comment">// [1, 2, 3, [1, 5]];</span>
ary <span class="token comment">// [4, 2, 3, [1, 5]];</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h2><p>深拷贝将对象深层进行完整的精确拷贝，对新对象的任何修改不会影响原对象数据。</p><h3 id="json-parse-json-stringify" tabindex="-1"><a class="header-anchor" href="#json-parse-json-stringify" aria-hidden="true">#</a> JSON.parse(JSON.stringify())</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;donggua&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
newObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;_donggua&#39;</span>
newObj<span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token operator">++</span>

obj <span class="token comment">// { name: &#39;donggua&#39;, props: { value: 1 } }</span>
newObj <span class="token comment">// { name: &#39;_donggua&#39;, props: { value: 2 } }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>但 <code>JSON.stringify()</code> 存在明显的弊端:</strong></p><ul><li><code>JSON.stringify()</code> 只能序列化对象的可枚举的自有属性</li><li><code>undefined</code>、<code>Symbol</code>、任意函数将被忽略</li><li><code>NaN</code>、<code>Infinity</code> 、<code>-Infinity</code> 将被当成 <code>null</code> 处理</li><li><code>RegExp</code>、<code>Error</code>、<code>Set</code>、<code>Map</code> 等特殊对象，仅会序列化可枚举的属性（一般情况下即为空对象）</li><li>Date 类型，转换后会调用 toJSON 转为字符串类型</li><li>循环引用的对象将报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// Map: 0: {1 =&gt; 2}</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">NaN</span><span class="token punctuation">,</span>
  <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
  <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span>
  <span class="token literal-property property">f</span><span class="token operator">:</span> map<span class="token punctuation">,</span>
  <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// h: obj =&gt; throw Error</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// before:</span>
<span class="token comment">// obj: {</span>
<span class="token comment">//     a: undefined</span>
<span class="token comment">//     b: Symbol()</span>
<span class="token comment">//     c: NaN</span>
<span class="token comment">//     d: Infinity</span>
<span class="token comment">//     e: -Infinity</span>
<span class="token comment">//     f: Map: 0: {1 =&gt; 2}</span>
<span class="token comment">//     g: Fri Jan 28 2022 23: 29: 48 GMT + 0800(中国标准时间) {}</span>
<span class="token comment">//     i: &quot;hidden value&quot;</span>
<span class="token comment">// }</span>

<span class="token comment">// after</span>
<span class="token comment">// newObj: {</span>
<span class="token comment">//     c: null,</span>
<span class="token comment">//     d: null,</span>
<span class="token comment">//     e: null,</span>
<span class="token comment">//     f: {},</span>
<span class="token comment">//     g: &#39;2022-01-28T15:29:48.519Z&#39;</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="structuredclone" tabindex="-1"><a class="header-anchor" href="#structuredclone" aria-hidden="true">#</a> structuredClone</h3>`,20),u={href:"https://developer.mozilla.org/en-US/docs/Web/API/structuredClone",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;MDN&#39;</span>
<span class="token punctuation">}</span>
original<span class="token punctuation">.</span>itself <span class="token operator">=</span> original

<span class="token keyword">const</span> clone <span class="token operator">=</span> <span class="token function">structuredClone</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>clone <span class="token operator">!==</span> original<span class="token punctuation">)</span> <span class="token comment">// the objects are not the same (not same identity)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>clone<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;MDN&#39;</span><span class="token punctuation">)</span> <span class="token comment">// they do have the same values</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>clone<span class="token punctuation">.</span>itself <span class="token operator">===</span> clone<span class="token punctuation">)</span> <span class="token comment">// and the circular reference is preserved</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>HTML</code> 规范的标准提案，默认解决了循环引用问题，支持多种默认数据类型。同时不限于普通拷贝，可使用 <code>structuredClone(value, { transfer })</code> 调用方式以直接移动源数据</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>尽管作为规范标准实现的 Web API，但目前兼容性还是个巨大的问题，同时仍有其他不足：</p><ul><li>无法拷贝对象的原型链</li><li>无法拷贝函数</li><li>不支持 <code>Error</code> 数据类型</li><li>...</li></ul></div><h3 id="messagechannel" tabindex="-1"><a class="header-anchor" href="#messagechannel" aria-hidden="true">#</a> MessageChannel</h3><blockquote><p>vue.nextTick 源码曾使用的 Web API，在了解这个 API 时发现可以用于深拷贝</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">cloneUsingChannel</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    channel<span class="token punctuation">.</span>port1<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    channel<span class="token punctuation">.</span>port2<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但该方法存在一个缺陷，当拷贝对象带有函数属性时，将抛出错误：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token function">cloneUsingChannel</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token comment">// Failed to execute &#39;postMessage&#39; on &#39;MessagePort&#39;: function() {} could not be cloned.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jquery、lodash" tabindex="-1"><a class="header-anchor" href="#jquery、lodash" aria-hidden="true">#</a> JQuery、lodash</h3><ul><li><code>JQuery.extend()</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&#39;jquery&#39;</span>

<span class="token keyword">const</span> newObj <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>lodash.cloneDeep</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> cloneDeep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash&#39;</span>

<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function k(v,m){const e=t("ExternalLinkIcon");return o(),c("div",null,[r,n("blockquote",null,[n("p",null,[s("HTML 规范标准的 "),n("a",u,[s("Web API"),l(e)])])]),d])}const g=p(i,[["render",k],["__file","clone.html.vue"]]);export{g as default};
