import{r as e,o as t,c as o,b as n,e as c,F as l,a as s,d as a}from"./app.bcc828e2.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const u={},i=s(`<h1 id="\u5BF9\u8C61\u7684\u62F7\u8D1D" tabindex="-1"><a class="header-anchor" href="#\u5BF9\u8C61\u7684\u62F7\u8D1D" aria-hidden="true">#</a> \u5BF9\u8C61\u7684\u62F7\u8D1D</h1><p>\u7531\u4E8E JavaScript \u4E2D\u5BF9\u8C61\u662F\u5F15\u7528\u6570\u636E\u7C7B\u578B\uFF0C\u8BBF\u95EE\u3001\u64CD\u4F5C\u5BF9\u8C61\u5B9E\u9645\u4E0A\u5C31\u662F\u5BF9\u5176\u5185\u5B58\u5730\u5740\u4E0A\u7684\u6570\u636E\u8FDB\u884C\u8BFB\u5199\u64CD\u4F5C\u3002\u5728\u5F00\u53D1\u4E2D\u6267\u884C\u62F7\u8D1D\u5BF9\u8C61\u5E76\u8FDB\u884C\u4FEE\u6539\u65F6\uFF0C\u4FBF\u9700\u8981\u6839\u636E\u573A\u666F\u9700\u6C42\u6CE8\u610F\u5BF9\u539F\u5BF9\u8C61\u6570\u636E\u7684\u5F71\u54CD\u3002</p><h2 id="\u6D45\u62F7\u8D1D" tabindex="-1"><a class="header-anchor" href="#\u6D45\u62F7\u8D1D" aria-hidden="true">#</a> \u6D45\u62F7\u8D1D</h2><p>\u6D45\u62F7\u8D1D\u53EA\u4F1A\u5BF9\u4E00\u5C42\u5BF9\u8C61\u5F00\u8F9F\u65B0\u7684\u5185\u5B58\u7A7A\u95F4\u8FDB\u884C\u5B58\u653E\uFF0C\u5BF9\u4E8E\u5D4C\u5957\u5BF9\u8C61\u7684\u6DF1\u5C42\u5C5E\u6027\u4ECD\u662F\u539F\u6765\u7684\u5F15\u7528\u5730\u5740\u3002</p><h3 id="object-assign" tabindex="-1"><a class="header-anchor" href="#object-assign" aria-hidden="true">#</a> Object.assign()</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;donggua&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
newObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;_donggua&#39;</span><span class="token punctuation">;</span>
newObj<span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>

obj<span class="token punctuation">;</span> <span class="token comment">// { name: &#39;donggua&#39;, props: { value: 2 } }</span>
newObj<span class="token punctuation">;</span> <span class="token comment">// { name: &#39;_donggua&#39;, props: { value: 2 } }</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="array-prototype-concat" tabindex="-1"><a class="header-anchor" href="#array-prototype-concat" aria-hidden="true">#</a> Array.prototype.concat()</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ary <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

arr<span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, [1, 5]];</span>
ary<span class="token punctuation">;</span> <span class="token comment">// [4, 2, 3, [1, 5]];</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="array-prototype-slice" tabindex="-1"><a class="header-anchor" href="#array-prototype-slice" aria-hidden="true">#</a> Array.prototype.slice()</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ary <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

arr<span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, [1, 5]];</span>
ary<span class="token punctuation">;</span> <span class="token comment">// [4, 2, 3, [1, 5]];</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="es6-\u6269\u5C55\u8FD0\u7B97\u7B26" tabindex="-1"><a class="header-anchor" href="#es6-\u6269\u5C55\u8FD0\u7B97\u7B26" aria-hidden="true">#</a> ES6 \u6269\u5C55\u8FD0\u7B97\u7B26</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;donggua&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>obj
<span class="token punctuation">}</span><span class="token punctuation">;</span>
newObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;_donggua&#39;</span><span class="token punctuation">;</span>
newObj<span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>

obj<span class="token punctuation">;</span> <span class="token comment">// { name: &#39;donggua&#39;, props: { value: 2 } }</span>
newObj<span class="token punctuation">;</span> <span class="token comment">// { name: &#39;_donggua&#39;, props: { value: 2 } }</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>
ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

arr<span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, [1, 5]];</span>
ary<span class="token punctuation">;</span> <span class="token comment">// [4, 2, 3, [1, 5]];</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="\u6DF1\u62F7\u8D1D" tabindex="-1"><a class="header-anchor" href="#\u6DF1\u62F7\u8D1D" aria-hidden="true">#</a> \u6DF1\u62F7\u8D1D</h2><p>\u6DF1\u62F7\u8D1D\u5C06\u5BF9\u8C61\u6DF1\u5C42\u8FDB\u884C\u5B8C\u6574\u7684\u7CBE\u786E\u62F7\u8D1D\uFF0C\u5BF9\u65B0\u5BF9\u8C61\u7684\u4EFB\u4F55\u4FEE\u6539\u4E0D\u4F1A\u5F71\u54CD\u539F\u5BF9\u8C61\u6570\u636E\u3002</p><h3 id="json-parse-json-stringify" tabindex="-1"><a class="header-anchor" href="#json-parse-json-stringify" aria-hidden="true">#</a> JSON.parse(JSON.stringify())</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;donggua&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;_donggua&#39;</span><span class="token punctuation">;</span>
newObj<span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>

obj<span class="token punctuation">;</span> <span class="token comment">// { name: &#39;donggua&#39;, props: { value: 1 } }</span>
newObj<span class="token punctuation">;</span> <span class="token comment">// { name: &#39;_donggua&#39;, props: { value: 2 } }</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>\u4F46 <code>JSON.stringify()</code> \u5B58\u5728\u660E\u663E\u7684\u5F0A\u7AEF:</strong></p><ul><li><code>JSON.stringify()</code> \u53EA\u80FD\u5E8F\u5217\u5316\u5BF9\u8C61\u7684\u53EF\u679A\u4E3E\u7684\u81EA\u6709\u5C5E\u6027</li><li><code>undefined</code>\u3001<code>Symbol</code>\u3001\u4EFB\u610F\u51FD\u6570\u5C06\u88AB\u5FFD\u7565</li><li><code>NaN</code>\u3001<code>Infinity</code> \u3001<code>-Infinity</code> \u5C06\u88AB\u5F53\u6210 <code>null</code> \u5904\u7406</li><li><code>RegExp</code>\u3001<code>Error</code>\u3001<code>Set</code>\u3001<code>Map</code> \u7B49\u7279\u6B8A\u5BF9\u8C61\uFF0C\u4EC5\u4F1A\u5E8F\u5217\u5316\u53EF\u679A\u4E3E\u7684\u5C5E\u6027\uFF08\u4E00\u822C\u60C5\u51B5\u4E0B\u5373\u4E3A\u7A7A\u5BF9\u8C61\uFF09</li><li>Date \u7C7B\u578B\uFF0C\u8F6C\u6362\u540E\u4F1A\u8C03\u7528 toJSON \u8F6C\u4E3A\u5B57\u7B26\u4E32\u7C7B\u578B</li><li>\u5FAA\u73AF\u5F15\u7528\u7684\u5BF9\u8C61\u5C06\u62A5\u9519</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map: 0: {1 =&gt; 2}</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">NaN</span><span class="token punctuation">,</span>
  <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
  <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span>
  <span class="token literal-property property">f</span><span class="token operator">:</span> map<span class="token punctuation">,</span>
  <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// h: obj =&gt; throw Error</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// before:</span>
<span class="token comment">// obj: {</span>
<span class="token comment">//     a: undefined</span>
<span class="token comment">//     b: Symbol()</span>
<span class="token comment">//     c: NaN</span>
<span class="token comment">//     d: Infinity</span>
<span class="token comment">//     e: -Infinity</span>
<span class="token comment">//     f: Map: 0: {1 =&gt; 2}</span>
<span class="token comment">//     g: Fri Jan 28 2022 23: 29: 48 GMT + 0800(\u4E2D\u56FD\u6807\u51C6\u65F6\u95F4) {}</span>
<span class="token comment">//     i: &quot;hidden value&quot;</span>
<span class="token comment">// }</span>

<span class="token comment">// after </span>
<span class="token comment">// newObj: {</span>
<span class="token comment">//     c: null,</span>
<span class="token comment">//     d: null,</span>
<span class="token comment">//     e: null,</span>
<span class="token comment">//     f: {},</span>
<span class="token comment">//     g: &#39;2022-01-28T15:29:48.519Z&#39;</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h3 id="structuredclone" tabindex="-1"><a class="header-anchor" href="#structuredclone" aria-hidden="true">#</a> structuredClone</h3>`,20),k=a("HTML \u89C4\u8303\u6807\u51C6\u7684 "),b={href:"https://developer.mozilla.org/en-US/docs/Web/API/structuredClone",target:"_blank",rel:"noopener noreferrer"},m=a("Web API"),d=s(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;MDN&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
original<span class="token punctuation">.</span>itself <span class="token operator">=</span> original<span class="token punctuation">;</span>

<span class="token keyword">const</span> clone <span class="token operator">=</span> <span class="token function">structuredClone</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>clone <span class="token operator">!==</span> original<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// the objects are not the same (not same identity)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>clone<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&quot;MDN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// they do have the same values</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>clone<span class="token punctuation">.</span>itself <span class="token operator">===</span> clone<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// and the circular reference is preserved</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>HTML</code> \u89C4\u8303\u7684\u6807\u51C6\u63D0\u6848\uFF0C\u9ED8\u8BA4\u89E3\u51B3\u4E86\u5FAA\u73AF\u5F15\u7528\u95EE\u9898\uFF0C\u652F\u6301\u591A\u79CD\u9ED8\u8BA4\u6570\u636E\u7C7B\u578B\u3002\u540C\u65F6\u4E0D\u9650\u4E8E\u666E\u901A\u62F7\u8D1D\uFF0C\u53EF\u4F7F\u7528 <code>structuredClone(value, { transfer })</code> \u8C03\u7528\u65B9\u5F0F\u4EE5\u76F4\u63A5\u79FB\u52A8\u6E90\u6570\u636E</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>\u5C3D\u7BA1\u4F5C\u4E3A\u89C4\u8303\u6807\u51C6\u5B9E\u73B0\u7684Web API\uFF0C\u4F46\u76EE\u524D\u517C\u5BB9\u6027\u8FD8\u662F\u4E2A\u5DE8\u5927\u7684\u95EE\u9898\uFF0C\u540C\u65F6\u4ECD\u6709\u5176\u4ED6\u4E0D\u8DB3\uFF1A</p><ul><li>\u65E0\u6CD5\u62F7\u8D1D\u5BF9\u8C61\u7684\u539F\u578B\u94FE</li><li>\u65E0\u6CD5\u62F7\u8D1D\u51FD\u6570</li><li>\u4E0D\u652F\u6301 <code>Error</code> \u6570\u636E\u7C7B\u578B</li><li>...</li></ul></div><h3 id="messagechannel" tabindex="-1"><a class="header-anchor" href="#messagechannel" aria-hidden="true">#</a> MessageChannel</h3><blockquote><p>vue.nextTick \u6E90\u7801\u66FE\u4F7F\u7528\u7684Web API\uFF0C\u5728\u4E86\u89E3\u8FD9\u4E2AAPI\u65F6\u53D1\u73B0\u53EF\u4EE5\u7528\u4E8E\u6DF1\u62F7\u8D1D</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">cloneUsingChannel</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    channel<span class="token punctuation">.</span>port1<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    channel<span class="token punctuation">.</span>port2<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u4F46\u8BE5\u65B9\u6CD5\u5B58\u5728\u4E00\u4E2A\u7F3A\u9677\uFF0C\u5F53\u62F7\u8D1D\u5BF9\u8C61\u5E26\u6709\u51FD\u6570\u5C5E\u6027\u65F6\uFF0C\u5C06\u629B\u51FA\u9519\u8BEF\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token function">cloneUsingChannel</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token comment">// Failed to execute &#39;postMessage&#39; on &#39;MessagePort&#39;: function() {} could not be cloned.</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="jquery\u3001lodash" tabindex="-1"><a class="header-anchor" href="#jquery\u3001lodash" aria-hidden="true">#</a> JQuery\u3001lodash</h3><ul><li><code>JQuery.extend()</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> newObj <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>lodash.cloneDeep</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> cloneDeep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">;</span> 

<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,13);function g(y,h){const p=e("ExternalLinkIcon");return t(),o(l,null,[i,n("blockquote",null,[n("p",null,[k,n("a",b,[m,c(p)])])]),d],64)}var f=r(u,[["render",g]]);export{f as default};
