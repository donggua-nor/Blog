import{_ as s,c as n,o as a,e as l}from"./app.c1b4a40c.js";const d=JSON.parse('{"title":"编译执行流程","description":"","frontmatter":{"prev":false,"next":false,"outline":[2,4]},"headers":[{"level":2,"title":"基本编译流程","slug":"基本编译流程","link":"#基本编译流程","children":[{"level":3,"title":"词法分析（Lexical Analysis）","slug":"词法分析-lexical-analysis","link":"#词法分析-lexical-analysis","children":[]},{"level":3,"title":"语法分析（Synatax Analysis）","slug":"语法分析-synatax-analysis","link":"#语法分析-synatax-analysis","children":[]},{"level":3,"title":"代码生成","slug":"代码生成","link":"#代码生成","children":[]}]},{"level":2,"title":"执行上下文与作用域","slug":"执行上下文与作用域","link":"#执行上下文与作用域","children":[{"level":3,"title":"执行上下文","slug":"执行上下文","link":"#执行上下文","children":[]},{"level":3,"title":"执行上下文堆栈","slug":"执行上下文堆栈","link":"#执行上下文堆栈","children":[]},{"level":3,"title":"深入执行上下文","slug":"深入执行上下文","link":"#深入执行上下文","children":[{"level":4,"title":"创建阶段","slug":"创建阶段","link":"#创建阶段","children":[{"level":5,"title":"初始化作用域链（Scope Chain）","slug":"初始化作用域链-scope-chain","link":"#初始化作用域链-scope-chain","children":[]},{"level":5,"title":"创建变量对象","slug":"创建变量对象","link":"#创建变量对象","children":[]},{"level":5,"title":"扫描分析代码","slug":"扫描分析代码","link":"#扫描分析代码","children":[]},{"level":5,"title":"确定 this 的值","slug":"确定-this-的值","link":"#确定-this-的值","children":[]}]},{"level":4,"title":"激活/执行阶段","slug":"激活-执行阶段","link":"#激活-执行阶段","children":[]}]},{"level":3,"title":"应用拓展","slug":"应用拓展","link":"#应用拓展","children":[{"level":4,"title":"变量提升","slug":"变量提升","link":"#变量提升","children":[]},{"level":4,"title":"let / const","slug":"let-const","link":"#let-const","children":[]},{"level":4,"title":"闭包","slug":"闭包","link":"#闭包","children":[]},{"level":4,"title":"箭头函数","slug":"箭头函数","link":"#箭头函数","children":[]}]}]}],"relativePath":"notes/js/execution.md","lastUpdated":1680931489000}'),o={name:"notes/js/execution.md"},p=l(`<h1 id="编译执行流程" tabindex="-1">编译执行流程 <a class="header-anchor" href="#编译执行流程" aria-hidden="true">#</a></h1><h2 id="基本编译流程" tabindex="-1">基本编译流程 <a class="header-anchor" href="#基本编译流程" aria-hidden="true">#</a></h2><h3 id="词法分析-lexical-analysis" tabindex="-1">词法分析（Lexical Analysis） <a class="header-anchor" href="#词法分析-lexical-analysis" aria-hidden="true">#</a></h3><p>将代码解析为词法单元 <code>token</code> 。 主要分为以下几种：</p><ul><li>关键字：例如 <code>var</code>、<code>let</code>、<code>const</code> 等</li><li>标识符：没有被引号括起来的连续字符，可能是一个变量，也可能是 <code>if</code>、<code>else</code> 这些关键字，又或者是 <code>true</code>、<code>false</code> 这些内置常量</li><li>运算符： <code>+</code>、<code>-</code>、 <code>\\</code>、<code>/</code> 等</li><li>数字：像十六进制，十进制，八进制以及科学表达式等语法</li><li>字符串：因为对计算机而言，字符串的内容会参与计算或显示</li><li>空格：连续的空格，换行，缩进等</li><li>注释：行注释或块注释都是一个不可拆分的最小语法单元</li><li>其他：大括号、小括号、分号、冒号等</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// source code</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;donggua&#39;</span><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// compile into Tokens</span></span>
<span class="line"><span style="color:#ABB2BF;">  ({</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Keyword&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;var&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Identifier&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;name&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Punctuator&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;=&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;String&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&#39;donggua&#39;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Punctuator&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span></code></pre></div><h3 id="语法分析-synatax-analysis" tabindex="-1">语法分析（Synatax Analysis） <a class="header-anchor" href="#语法分析-synatax-analysis" aria-hidden="true">#</a></h3><p>将词法分析获得的 token，结合语句表达式，组合建立<strong>抽象语法树</strong></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>抽象语法树</strong>（ <em>Abstract Synatax Tree</em>, <strong>AST</strong> ） 常用于：</p><ul><li><code>ESLint</code> 等代码风格与语法检查</li><li><code>babel</code> 等工具进行代码转换</li><li><code>IDE</code> 的代码格式化、高亮与自动补全等</li><li><code>UgligyJS</code> 代码压缩混淆等</li></ul></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// AST</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Program&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;body&quot;</span><span style="color:#ABB2BF;">: [{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;VariableDeclaration&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;declarations&quot;</span><span style="color:#ABB2BF;">: [{</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;VariableDeclarator&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Identifier&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;init&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Literal&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;donggua&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;raw&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&#39;donggua&#39;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;kind&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;var&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;sourceType&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;script&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>AST</strong> 中代码结构清晰，上例中，变量声明语句 <em>VariableDeclaration</em>，变量声明器 <em>VariableDeclarator</em> 使用的是 <code>var</code> ，并在初始化 <code>init</code> 时提供字面量 <em>Literal</em> 值为 <code>donggua</code></p><h3 id="代码生成" tabindex="-1">代码生成 <a class="header-anchor" href="#代码生成" aria-hidden="true">#</a></h3><p>获取 AST 并将其转化成平台机器可执行的低级代码</p><h2 id="执行上下文与作用域" tabindex="-1">执行上下文与作用域 <a class="header-anchor" href="#执行上下文与作用域" aria-hidden="true">#</a></h2><blockquote><p><em>Execution Contect &amp; Stack</em></p></blockquote><p>除此之外，在 JavaScript 解析执行过程中，JS 引擎并不是真正的逐行解析，而是根据代码划分成对应的执行环境并依此执行</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>JS 引擎有 <em>Chrome</em> 的 <a href="https://v8.dev/" target="_blank" rel="noreferrer"><code>V8</code></a>、 <em>Firefox</em> 的 <code>SpiderMonkey</code> 等各浏览器厂商基于 <code>ECMAScript</code> 标准实现。但部分实现上亦存在细节上的差异，如 <code>EventLoop</code> 执行顺序可能并不一致。笔者实践上以 <code>Chrome</code> 为主。</p></div><h3 id="执行上下文" tabindex="-1">执行上下文 <a class="header-anchor" href="#执行上下文" aria-hidden="true">#</a></h3><p>JS 代码的执行环境称为 <strong>执行上下文</strong> (<em>Execution Contect</em>)，一般分为以下几种：</p><ul><li>全局代码</li><li>函数代码</li><li>Eval 代码</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><a href="https://developer.mozilla.org/zh-CN/docs/orphaned/Web/JavaScript/Reference/Global_Objects/eval#don.27t_use_eval.21" target="_blank" rel="noreferrer"><code>eval</code></a> 通过调用 JS 解释器执行代码，拥有调用者权限，容易导致网站遭受恶意攻击，应避免使用</p></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ctx.js</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Global context</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// local context of funtion fn</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// local context of funtion foo</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bar</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// local context of funtion bar</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre></div><h3 id="执行上下文堆栈" tabindex="-1">执行上下文堆栈 <a class="header-anchor" href="#执行上下文堆栈" aria-hidden="true">#</a></h3><p>在实际开发中，函数的数量是任意多的。而 JavaScript 解释器是单线程同步进行的，每次仅能执行处理一个上下文。 因此 JS 中通过 <strong>堆栈</strong> 抽象化 <strong>执行上下文堆栈</strong> 以处理代码块执行</p><p>通过堆栈对上述例子进行抽象如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// abstract stack for ctx.js</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 程序执行时，初始化将推入全局执行上下文</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ECStack</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">GlobalExecutionContext</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// fn() 函数 fn 执行，推入栈中</span></span>
<span class="line"><span style="color:#E5C07B;">ECStack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fnExecutionContext</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// foo() 函数 foo 执行，推入栈中</span></span>
<span class="line"><span style="color:#E5C07B;">ECStack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fooExecutionContext</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 函数 bar 并没有执行，不会推入栈中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// foo() 执行完毕后自动推出堆栈</span></span>
<span class="line"><span style="color:#E5C07B;">ECStack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// fn() 执行完毕后自动推出堆栈</span></span>
<span class="line"><span style="color:#E5C07B;">ECStack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ECStack 的 GLobalExecutionContext 将保留直到程序结束运行，比如浏览器关闭/当前标签页关闭</span></span>
<span class="line"></span></code></pre></div><p>可以借助浏览器调试工具进行直观的 <strong>debugger</strong></p><blockquote><p><code>chrome == &gt; Source === &gt; Call Stack</code></p></blockquote><p><img src="https://cdn.JsDelivr.net/gh/donggua-nor/picture-lib//blog/execution_context_example.gif" alt="execution_context_example"></p><h3 id="深入执行上下文" tabindex="-1">深入执行上下文 <a class="header-anchor" href="#深入执行上下文" aria-hidden="true">#</a></h3><p>当进入执行上下文时，都会经历两个阶段：</p><h4 id="创建阶段" tabindex="-1">创建阶段 <a class="header-anchor" href="#创建阶段" aria-hidden="true">#</a></h4><h5 id="初始化作用域链-scope-chain" tabindex="-1">初始化作用域链（<em>Scope Chain</em>） <a class="header-anchor" href="#初始化作用域链-scope-chain" aria-hidden="true">#</a></h5><p>在 JavaScript 中，决定变量、函数和对象等属性的可访问性的区域称为 <strong>作用域</strong>(<em>Scope</em>)，作用域起到了数据隔离的作用，非嵌套的作用域是独立不冲突的</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>JavaScript 使用<strong>词法作用域</strong>(<em>lexical scoping</em>)，又称<strong>静态作用域</strong>(<em>static scoping</em>) 在函数定义时即决定了作用域。</p><p>与之相对的是<strong>动态作用域</strong>(<em>dynamic scoping</em>), 在函数运行时才决定作用域</p><p>简单来说，单从代码层面上我们就能确定 JavaScript 中函数的作用域</p></div><p>在进入执行上下文时，会创建变量对象的一个<strong>作用域链</strong>(<em>Scope Chain</em>)。这个作用域链决定了各级上下文中的代码在访问变量和函数时的顺序与访问权限，代码正在执行的上下文的变量对象始终位于作用域链的最前端。</p><p>查找变量时，从作用域链的最前端(即当前上下文)查找, 然后逐级向后查找父级上下文，直到最顶层的全局上下文。若最终找不到，通常抛出错误 <code>Reference Error</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Global Scope</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// Local Scope #foo</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bar</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// Local Scope #bar</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">bar</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre></div><p><img src="https://cdn.JsDelivr.net/gh/donggua-nor/picture-lib//blog/scope_chain_example.jpg" alt="scope_chain_example"></p><h5 id="创建变量对象" tabindex="-1">创建变量对象 <a class="header-anchor" href="#创建变量对象" aria-hidden="true">#</a></h5><p><strong>变量对象</strong>（<em>Variable Object</em>，<strong>AO</strong>）是与执行上下文相关的数据对象，其保存了上下文中所定义的变量和函数。并且只有进入执行上下文时，变量对象才被激活，其各种属性才能被访问。</p><blockquote><p>变量对象是 ECMAScript 规范术语, 只有解析器在处理数据时才会使用它。</p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><ol><li>在 web 浏览器的全局上下文中， <code>window</code> 对象被认为是<strong>全局对象</strong>（<em>Global Object</em>，<strong>GO</strong>），因此所有全局变量和函数都是作为 <code>window</code> 对象的属性与方法。即全局上下文中，全局对象预被定义为活动对象，且通过 <code>window</code> 属性指向其自身：</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>在函数上下文中，初始化时将创建只包括 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="noreferrer">arguments</a> 对象的<strong>活动对象</strong>（<em>Activation Object</em>，<strong>AO</strong>）并将其作为变量对象</li></ol></div><h5 id="扫描分析代码" tabindex="-1">扫描分析代码 <a class="header-anchor" href="#扫描分析代码" aria-hidden="true">#</a></h5><ol><li>先处理函数声明，使用函数名在活动对象中创建属性，并引用指向该函数。若存在相同的函数名，完全替换之。</li><li>再处理变量声明，使用变量名在活动对象中创建属性，并初始化值为 <code>undefined</code>。若存在相同的变量名，则跳过。</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// example</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">anonymous</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {} </span><span style="color:#7F848E;font-style:italic;">// 声明变量且指向匿名函数</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">context</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// abstract example</span></span>
<span class="line"><span style="color:#E06C75;">fooExecutionContext</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">ScopeChain</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">ActivationObject</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">arguments</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">reference</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(), </span><span style="color:#7F848E;font-style:italic;">// 对函数fn的引用</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">anonymous</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">undefined</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">this</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><h5 id="确定-this-的值" tabindex="-1">确定 this 的值 <a class="header-anchor" href="#确定-this-的值" aria-hidden="true">#</a></h5><ul><li><p>在全局上下文中，this 指向全局对象，具体值由其宿主环境决定</p><p>在 web 浏览器中，默认为非严格模式，其指向 <code>window</code></p><p>在 <code>ECMAScript</code> 规范中，默认开启严格模式， <strong>this</strong> 的值为 <code>undefined</code></p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&#39;use strict&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"></span></code></pre></div><ul><li>在函数中， this 始终指向调用函数的对象（ 运行时绑定）</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">fn</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// window - 相当于 window.fn();</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// obj</span></span>
<span class="line"><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// obj</span></span>
<span class="line"></span></code></pre></div><ul><li>ES6 箭头函数中，没有自身的 <code>this</code> 绑定，而是继承其所在上下文的 <code>this</code> 值</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"></span></code></pre></div><h4 id="激活-执行阶段" tabindex="-1">激活/执行阶段 <a class="header-anchor" href="#激活-执行阶段" aria-hidden="true">#</a></h4><ul><li>在上下文中逐行执行代码为变量/函数并赋值</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#E06C75;">fooExecutionContext</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">ScopeChain</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">ActivationObject</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">arguments</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">reference</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(), </span><span style="color:#7F848E;font-style:italic;">// 对函数fn的引用</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">anonymous</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">reference</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">FunctionExpression</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 对函数表达式的引用</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">this</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="应用拓展" tabindex="-1">应用拓展 <a class="header-anchor" href="#应用拓展" aria-hidden="true">#</a></h3><h4 id="变量提升" tabindex="-1">变量提升 <a class="header-anchor" href="#变量提升" aria-hidden="true">#</a></h4><p>通过了解执行上下文的完整流程，理解 <code>var</code> 及 <code>function</code> 声明操作的变量提升：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 打印结果：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// function</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// number</span></span>
<span class="line"></span></code></pre></div><p>编译流程如下：</p><ol><li>进入全局上下文</li><li>初始化变量对象</li></ol><ul><li>创建阶段</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// line 3：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 声明变量 foo 并指向函数 foo()</span></span>
<span class="line"><span style="color:#E5C07B;">VO</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">reference</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// line 4： \`var foo = 1;\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 变量声明，变量名已存在，跳过处理</span></span>
<span class="line"><span style="color:#E5C07B;">VO</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">reference</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>执行阶段，边赋值边执行</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// line 1：\`console.log(typeof foo);\`</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 此时 foo 是函数指针</span></span>
<span class="line"><span style="color:#ABB2BF;">  log: </span><span style="color:#C678DD;">function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// line 4：\`var foo = 1;\`</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 变量赋值，将 foo 赋值为 1</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">VO</span><span style="color:#ABB2BF;"> = {</span></span>
<span class="line"><span style="color:#ABB2BF;">    foo: </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// line 6</span></span>
<span class="line"><span style="color:#ABB2BF;">  log: </span><span style="color:#E06C75;">number</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>变量提升只有声明提升，且仅提升到当前执行上下文的最顶部</p></div><h4 id="let-const" tabindex="-1">let / const <a class="header-anchor" href="#let-const" aria-hidden="true">#</a></h4><p>在 ES6 之前，JS 中声明变量只有 <code>var</code> 和 <code>function</code> 两种形式，并且相对其他语言没有块级作用域，只有全局/函数作用域。这导致了一些不合理的现象：</p><ul><li>在变量声明前使用变量不会报错</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"></span></code></pre></div><ul><li>作用域内外变量数据冲突</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 声明变量提升，而赋值操作不会被执行</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 变量提升仅提升到当前执行上下文</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 此时 fn 执行上下文中活动对象存在未赋值的 a 变量</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// fn Context =&gt; AO = { a: undefined }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"></span></code></pre></div><ul><li>应属于块级作用域的变量泄漏为全局变量</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;i in for&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 没有块级作用域，相当于</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;i in for&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"></span></code></pre></div><p>在 ES6 中新增了 <code>let</code> 与 <code>const</code> 用于声明变量，并有以下<a href="https://262.ecma-international.org/6.0/#sec-let-and-const-declarations" target="_blank" rel="noreferrer">标准</a>:</p><p><em>The variables are created when their containing Lexical Environment is instantiated but may not be accessed in any way until the variable’s LexicalBinding is evaluated</em></p><blockquote><p>在实例化变量时，包含变量的词法作用域将创建变量，但在具体声明前不允许访问使用</p></blockquote><p>该标准指明两点内容：</p><ul><li><code>let</code>、<code>const</code> 声明仍存在变量提升</li><li><code>let</code>、<code>const</code> 声明的变量，必须先声明再使用，否则将抛出错误 <code>ReferenceError</code></li></ul><p>其中，在 <code>let</code> 、 <code>const</code> 所在作用域直到其声明语句前的区域，在语法上称为<strong>暂时性死区</strong>（<em>Temporal Dead Zone</em>, 简称<strong>TDZ</strong>） 结合例子理解下上述内容：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// Uncaught ReferenceError: a is not defined</span></span>
<span class="line"></span></code></pre></div><ol><li>在声明前使用变量，报错</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// ReferenceError: Cannot access &#39;a&#39; before initialization</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>如果不存在变量提升，那么执行函数 <code>fn</code> 应该时打印全局作用域中 <code>a = 1</code> 而不是报错</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;i in for&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// Uncaught ReferenceError: i is not defined</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li><code>let</code> 声明的变量仅所在块级作用域有效，不会提升到全局上<div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>const</code> 声明的变量并非值不可改变，而是变量指向的那个内存地址所保存的数据不得改动</p></div></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// Uncaught TypeError: Assignment to constant variable</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// { a: 2 }</span></span>
<span class="line"></span></code></pre></div><h4 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-hidden="true">#</a></h4><p>了解了 作用域 与 作用域链，我们知道变量存在于上下文的作用域中，当函数执行完毕离开执行上下文时，该作用域将不再存在，理论上也不能再访问其中的变量。如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// VM38:5 Uncaught ReferenceError: a is not defined</span></span>
<span class="line"></span></code></pre></div><p>而实际上，我们会发现有些时候并不一样：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">log</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">demo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">demo</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"></span></code></pre></div><p>在这个例子中，我们就成功打印出了函数 <code>fn</code> 中变量 <code>a</code> 的值。</p><p>原因是我们通过在函数 <code>fn</code> 内部嵌套使用 <code>log</code> 函数，<strong>保留了对其父级作用域的引用</strong>，即闭包操作。</p><hr><p><strong>闭包的应用</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// (5)6</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在浏览器 <strong>EventLoops</strong> 机制中， <code>setTimeout(fn, 0)</code> 意为：</p><p>当主线程执行栈内为空时，尽快执行回调函数 <code>fn</code> ，而非简单的 0 毫秒延迟后执行</p></div><p>上例中，第一轮主线程执行完毕后，全局上下文下 <code>i = 6</code> ，此时再依次执行 <code>setTimeout</code> 的回调函数，所以打印结果都是 <code>6</code> 。</p><p>为解决这类问题，可通过创建闭包函数，以<strong>立即执行函数（IIFE）</strong> 为经典示例，将每次事件之行后变量 <code>i</code> 的值保留到定时器的回调函数中。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 闭包 - IIFE</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ;(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">j</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  })(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1 2 3 4 5</span></span>
<span class="line"></span></code></pre></div><h4 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a></h4><p>ES6 对于函数扩展新增了箭头函数 <code>() =&gt;</code> ，简化了函数表达式和回调函数的书写。 但需要留意以下几点：</p><ul><li>没有自身的 <code>this</code> 绑定，而是继承其所在上下文的 <code>this</code> 值</li><li>没有自身的 <code>this</code> 绑定， 因此不能作为构造函数</li><li>不可使用 <code>arguments</code> 对象，需要用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters" target="_blank" rel="noreferrer">rest parameters</a> 参数代替</li><li>不可使用 <code>yield</code> 指令，因此不能作为 <code>Generator</code> 函数</li><li>返回对象时，<strong>必须用扣号包裹</strong></li><li>箭头函数不存在原型（打印结果为：<code>undefined</code>）</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">arrowFn</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">rest</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// window</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// console.log(agruments); throw ReferenceError: agrument is not defined</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rest</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// [1, 2, 3]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">arrowFn</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arrowFn</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">arrowFn</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// TypeError: arrowFn is not a constructor</span></span>
<span class="line"></span></code></pre></div>`,107),e=[p];function c(t,B,r,y,i,F){return a(),n("div",null,e)}const C=s(o,[["render",c]]);export{d as __pageData,C as default};
