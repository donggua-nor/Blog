import{_ as p,M as o,p as c,q as i,R as n,t as s,N as t,a1 as a}from"./framework-e93b08cb.js";const l={},u=a(`<h1 id="编译执行流程" tabindex="-1"><a class="header-anchor" href="#编译执行流程" aria-hidden="true">#</a> 编译执行流程</h1><h2 id="基本编译流程" tabindex="-1"><a class="header-anchor" href="#基本编译流程" aria-hidden="true">#</a> 基本编译流程</h2><h3 id="词法分析-lexical-analysis" tabindex="-1"><a class="header-anchor" href="#词法分析-lexical-analysis" aria-hidden="true">#</a> 词法分析（Lexical Analysis）</h3><p>将代码解析为词法单元 <code>token</code> 。 主要分为以下几种：</p><ul><li>关键字：例如 <code>var</code>、<code>let</code>、<code>const</code> 等</li><li>标识符：没有被引号括起来的连续字符，可能是一个变量，也可能是 <code>if</code>、<code>else</code> 这些关键字，又或者是 <code>true</code>、<code>false</code> 这些内置常量</li><li>运算符： <code>+</code>、<code>-</code>、 <code>\\</code>、<code>/</code> 等</li><li>数字：像十六进制，十进制，八进制以及科学表达式等语法</li><li>字符串：因为对计算机而言，字符串的内容会参与计算或显示</li><li>空格：连续的空格，换行，缩进等</li><li>注释：行注释或块注释都是一个不可拆分的最小语法单元</li><li>其他：大括号、小括号、分号、冒号等</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// source code</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;donggua&#39;</span>

<span class="token comment">// compile into Tokens</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Keyword&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;var&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;name&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Punctuator&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;=&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;String&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;&#39;donggua&#39;&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Punctuator&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;;&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="语法分析-synatax-analysis" tabindex="-1"><a class="header-anchor" href="#语法分析-synatax-analysis" aria-hidden="true">#</a> 语法分析（Synatax Analysis）</h3><p>将词法分析获得的 token，结合语句表达式，组合建立<strong>抽象语法树</strong></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><strong>抽象语法树</strong>（ <em>Abstract Synatax Tree</em>, <strong>AST</strong> ） 常用于：</p><ul><li><code>ESLint</code> 等代码风格与语法检查</li><li><code>babel</code> 等工具进行代码转换</li><li><code>IDE</code> 的代码格式化、高亮与自动补全等</li><li><code>UgligyJS</code> 代码压缩混淆等</li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// AST</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Program&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclaration&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;declarations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
      <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclarator&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;name&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;init&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Literal&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;donggua&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;raw&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&#39;donggua&#39;&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;kind&quot;</span><span class="token operator">:</span> <span class="token string">&quot;var&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;script&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>AST</strong> 中代码结构清晰，上例中，变量声明语句 <em>VariableDeclaration</em>，变量声明器 <em>VariableDeclarator</em> 使用的是 <code>var</code> ，并在初始化 <code>init</code> 时提供字面量 <em>Literal</em> 值为 <code>donggua</code></p><h3 id="代码生成" tabindex="-1"><a class="header-anchor" href="#代码生成" aria-hidden="true">#</a> 代码生成</h3><p>获取 AST 并将其转化成平台机器可执行的低级代码</p><h2 id="执行上下文与作用域" tabindex="-1"><a class="header-anchor" href="#执行上下文与作用域" aria-hidden="true">#</a> 执行上下文与作用域</h2><blockquote><p><em>Execution Contect &amp; Stack</em></p></blockquote><p>除此之外，在 JavaScript 解析执行过程中，JS 引擎并不是真正的逐行解析，而是根据代码划分成对应的执行环境并依此执行</p>`,16),r={class:"custom-container tip"},d=n("p",{class:"custom-container-title"},"TIP",-1),k=n("em",null,"Chrome",-1),v={href:"https://v8.dev/",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"V8",-1),b=n("em",null,"Firefox",-1),g=n("code",null,"SpiderMonkey",-1),f=n("code",null,"ECMAScript",-1),h=n("code",null,"EventLoop",-1),y=n("code",null,"Chrome",-1),_=n("h3",{id:"执行上下文",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#执行上下文","aria-hidden":"true"},"#"),s(" 执行上下文")],-1),w=n("p",null,[s("JS 代码的执行环境称为 "),n("strong",null,"执行上下文"),s(" ("),n("em",null,"Execution Contect"),s(")，一般分为以下几种：")],-1),j=n("ul",null,[n("li",null,"全局代码"),n("li",null,"函数代码"),n("li",null,"Eval 代码")],-1),x={class:"custom-container warning"},q=n("p",{class:"custom-container-title"},"WARNING",-1),S={href:"https://developer.mozilla.org/zh-CN/docs/orphaned/Web/JavaScript/Reference/Global_Objects/eval#don.27t_use_eval.21",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"eval",-1),C=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ctx.js</span>
<span class="token comment">// Global context</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// local context of funtion fn</span>
  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// local context of funtion foo</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// local context of funtion bar</span>
  <span class="token punctuation">}</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行上下文堆栈" tabindex="-1"><a class="header-anchor" href="#执行上下文堆栈" aria-hidden="true">#</a> 执行上下文堆栈</h3><p>在实际开发中，函数的数量是任意多的。而 JavaScript 解释器是单线程同步进行的，每次仅能执行处理一个上下文。 因此 JS 中通过 <strong>堆栈</strong> 抽象化 <strong>执行上下文堆栈</strong> 以处理代码块执行</p><p>通过堆栈对上述例子进行抽象如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// abstract stack for ctx.js</span>
<span class="token comment">// 程序执行时，初始化将推入全局执行上下文</span>
<span class="token keyword">const</span> ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>GlobalExecutionContext<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// fn() 函数 fn 执行，推入栈中</span>
ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fnExecutionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// foo() 函数 foo 执行，推入栈中</span>
ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fooExecutionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 函数 bar 并没有执行，不会推入栈中</span>

<span class="token comment">// foo() 执行完毕后自动推出堆栈</span>
ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// fn() 执行完毕后自动推出堆栈</span>
ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ECStack 的 GLobalExecutionContext 将保留直到程序结束运行，比如浏览器关闭/当前标签页关闭</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以借助浏览器调试工具进行直观的 <strong>debugger</strong></p><blockquote><p><code>chrome == &gt; Source === &gt; Call Stack</code></p></blockquote><p><img src="https://cdn.JsDelivr.net/gh/donggua-nor/picture-lib//blog/execution_context_example.gif" alt="execution_context_example"></p><h3 id="深入执行上下文" tabindex="-1"><a class="header-anchor" href="#深入执行上下文" aria-hidden="true">#</a> 深入执行上下文</h3><p>当进入执行上下文时，都会经历两个阶段：</p><h4 id="创建阶段" tabindex="-1"><a class="header-anchor" href="#创建阶段" aria-hidden="true">#</a> 创建阶段</h4><h5 id="初始化作用域链-scope-chain" tabindex="-1"><a class="header-anchor" href="#初始化作用域链-scope-chain" aria-hidden="true">#</a> 初始化作用域链（<em>Scope Chain</em>）</h5><p>在 JavaScript 中，决定变量、函数和对象等属性的可访问性的区域称为 <strong>作用域</strong>(<em>Scope</em>)，作用域起到了数据隔离的作用，非嵌套的作用域是独立不冲突的</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>JavaScript 使用<strong>词法作用域</strong>(<em>lexical scoping</em>)，又称<strong>静态作用域</strong>(<em>static scoping</em>) 在函数定义时即决定了作用域。</p><p>与之相对的是<strong>动态作用域</strong>(<em>dynamic scoping</em>), 在函数运行时才决定作用域</p><p>简单来说，单从代码层面上我们就能确定 JavaScript 中函数的作用域</p></div><p>在进入执行上下文时，会创建变量对象的一个<strong>作用域链</strong>(<em>Scope Chain</em>)。这个作用域链决定了各级上下文中的代码在访问变量和函数时的顺序与访问权限，代码正在执行的上下文的变量对象始终位于作用域链的最前端。</p><p>查找变量时，从作用域链的最前端(即当前上下文)查找, 然后逐级向后查找父级上下文，直到最顶层的全局上下文。若最终找不到，通常抛出错误 <code>Reference Error</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Global Scope</span>
<span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Local Scope #foo</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Local Scope #bar</span>
    val <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.JsDelivr.net/gh/donggua-nor/picture-lib//blog/scope_chain_example.jpg" alt="scope_chain_example"></p><h5 id="创建变量对象" tabindex="-1"><a class="header-anchor" href="#创建变量对象" aria-hidden="true">#</a> 创建变量对象</h5><p><strong>变量对象</strong>（<em>Variable Object</em>，<strong>AO</strong>）是与执行上下文相关的数据对象，其保存了上下文中所定义的变量和函数。并且只有进入执行上下文时，变量对象才被激活，其各种属性才能被访问。</p><blockquote><p>变量对象是 ECMAScript 规范术语, 只有解析器在处理数据时才会使用它。</p></blockquote>`,21),T={class:"custom-container tip"},A=a(`<p class="custom-container-title">TIP</p><ol><li>在 web 浏览器的全局上下文中， <code>window</code> 对象被认为是<strong>全局对象</strong>（<em>Global Object</em>，<strong>GO</strong>），因此所有全局变量和函数都是作为 <code>window</code> 对象的属性与方法。即全局上下文中，全局对象预被定义为活动对象，且通过 <code>window</code> 属性指向其自身：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">;</span> <span class="token comment">// true</span>
window<span class="token punctuation">.</span>window <span class="token operator">===</span> window<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),I={start:"2"},J={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments",target:"_blank",rel:"noopener noreferrer"},V=n("strong",null,"活动对象",-1),L=n("em",null,"Activation Object",-1),O=n("strong",null,"AO",-1),R=a(`<h5 id="扫描分析代码" tabindex="-1"><a class="header-anchor" href="#扫描分析代码" aria-hidden="true">#</a> 扫描分析代码</h5><ol><li>先处理函数声明，使用函数名在活动对象中创建属性，并引用指向该函数。若存在相同的函数名，完全替换之。</li><li>再处理变量声明，使用变量名在活动对象中创建属性，并初始化值为 <code>undefined</code>。若存在相同的变量名，则跳过。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// example</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token function-variable function">anonymous</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 声明变量且指向匿名函数</span>
  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">context</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// abstract example</span>
fooExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">ScopeChain</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">ActivationObject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token number">1</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
      <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    <span class="token literal-property property">fn</span><span class="token operator">:</span> reference to <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 对函数fn的引用</span>
    <span class="token literal-property property">anonymous</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="确定-this-的值" tabindex="-1"><a class="header-anchor" href="#确定-this-的值" aria-hidden="true">#</a> 确定 this 的值</h5><ul><li><p>在全局上下文中，this 指向全局对象，具体值由其宿主环境决定</p><p>在 web 浏览器中，默认为非严格模式，其指向 <code>window</code></p><p>在 <code>ECMAScript</code> 规范中，默认开启严格模式， <strong>this</strong> 的值为 <code>undefined</code></p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在函数中， this 始终指向调用函数的对象（ 运行时绑定）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  fn
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window - 相当于 window.fn(); </span>
obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ES6 箭头函数中，没有自身的 <code>this</code> 绑定，而是继承其所在上下文的 <code>this</code> 值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="激活-执行阶段" tabindex="-1"><a class="header-anchor" href="#激活-执行阶段" aria-hidden="true">#</a> 激活/执行阶段</h4><ul><li>在上下文中逐行执行代码为变量/函数并赋值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fooExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">ScopeChain</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">ActivationObject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token number">1</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
      <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">fn</span><span class="token operator">:</span> reference to <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 对函数fn的引用</span>
    <span class="token literal-property property">anonymous</span><span class="token operator">:</span> reference to FunctionExpression <span class="token comment">// 对函数表达式的引用</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用拓展" tabindex="-1"><a class="header-anchor" href="#应用拓展" aria-hidden="true">#</a> 应用拓展</h3><h4 id="变量提升" tabindex="-1"><a class="header-anchor" href="#变量提升" aria-hidden="true">#</a> 变量提升</h4><p>通过了解执行上下文的完整流程，理解 <code>var</code> 及 <code>function</code> 声明操作的变量提升：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 打印结果：</span>
<span class="token comment">// function</span>
<span class="token comment">// number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译流程如下：</p><ol><li>进入全局上下文</li><li>初始化变量对象</li></ol><ul><li>创建阶段</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// line 3： </span>
<span class="token comment">// 声明变量 foo 并指向函数 foo()</span>
<span class="token constant">VO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> reference to <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// line 4： \`var foo = 1;\`</span>
<span class="token comment">// 变量声明，变量名已存在，跳过处理</span>
<span class="token constant">VO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> reference to <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行阶段，边赋值边执行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// line 1：\`console.log(typeof foo);\`</span>
  <span class="token comment">// 此时 foo 是函数指针</span>
  <span class="token function-variable function">log</span><span class="token operator">:</span> <span class="token keyword">function</span>

  <span class="token comment">// line 4：\`var foo = 1;\`</span>
  <span class="token comment">// 变量赋值，将 foo 赋值为 1</span>
  <span class="token constant">VO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// line 6</span>
  <span class="token literal-property property">log</span><span class="token operator">:</span> number
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>变量提升只有声明提升，且仅提升到当前执行上下文的最顶部</p></div><h4 id="let-const" tabindex="-1"><a class="header-anchor" href="#let-const" aria-hidden="true">#</a> let / const</h4><p>在 ES6 之前，JS 中声明变量只有 <code>var</code> 和 <code>function</code> 两种形式，并且相对其他语言没有块级作用域，只有全局/函数作用域。这导致了一些不合理的现象：</p><ul><li>在变量声明前使用变量不会报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>作用域内外变量数据冲突</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 声明变量提升，而赋值操作不会被执行</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 变量提升仅提升到当前执行上下文</span>
  <span class="token comment">// 此时 fn 执行上下文中活动对象存在未赋值的 a 变量</span>
  <span class="token comment">// fn Context =&gt; AO = { a: undefined } </span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>应属于块级作用域的变量泄漏为全局变量</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;i in for&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>

<span class="token comment">// 没有块级作用域，相当于</span>
<span class="token keyword">var</span> i<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;i in for&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),F=n("code",null,"let",-1),P=n("code",null,"const",-1),D={href:"https://262.ecma-international.org/6.0/#sec-let-and-const-declarations",target:"_blank",rel:"noopener noreferrer"},G=a(`<p><em>The variables are created when their containing Lexical Environment is instantiated but may not be accessed in any way until the variable’s LexicalBinding is evaluated</em></p><blockquote><p>在实例化变量时，包含变量的词法作用域将创建变量，但在具体声明前不允许访问使用</p></blockquote><p>该标准指明两点内容：</p><ul><li><code>let</code>、<code>const</code> 声明仍存在变量提升</li><li><code>let</code>、<code>const</code> 声明的变量，必须先声明再使用，否则将抛出错误 <code>ReferenceError</code></li></ul><p>其中，在 <code>let</code> 、 <code>const</code> 所在作用域直到其声明语句前的区域，在语法上称为<strong>暂时性死区</strong>（<em>Temporal Dead Zone</em>, 简称<strong>TDZ</strong>） 结合例子理解下上述内容：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> a<span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: a is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>在声明前使用变量，报错</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: Cannot access &#39;a&#39; before initialization</span>
      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>如果不存在变量提升，那么执行函数 <code>fn</code> 应该时打印全局作用域中 <code>a = 1</code> 而不是报错</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;i in for&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: i is not defined </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>let</code> 声明的变量仅所在块级作用域有效，不会提升到全局上</li></ol><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>const</code> 声明的变量并非值不可改变，而是变量指向的那个内存地址所保存的数据不得改动</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught TypeError: Assignment to constant variable</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
obj<span class="token punctuation">;</span> <span class="token comment">// { a: 2 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h4><p>了解了 作用域 与 作用域链，我们知道变量存在于上下文的作用域中，当函数执行完毕离开执行上下文时，该作用域将不再存在，理论上也不能再访问其中的变量。如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// VM38:5 Uncaught ReferenceError: a is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而实际上，我们会发现有些时候并不一样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> log<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们就成功打印出了函数 <code>fn</code> 中变量 <code>a</code> 的值。</p><p>原因是我们通过在函数 <code>fn</code> 内部嵌套使用 <code>log</code> 函数，<strong>保留了对其父级作用域的引用</strong>，即闭包操作。</p><hr><p><strong>闭包的应用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// (5)6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在浏览器 <strong>EventLoops</strong> 机制中， <code>setTimeout(fn, 0)</code> 意为：</p><p>当主线程执行栈内为空时，尽快执行回调函数 <code>fn</code> ，而非简单的0毫秒延迟后执行</p></div><p>上例中，第一轮主线程执行完毕后，全局上下文下 <code>i = 6</code> ，此时再依次执行 <code>setTimeout</code> 的回调函数，所以打印结果都是 <code>6</code> 。</p><p>为解决这类问题，可通过创建闭包函数，以<strong>立即执行函数（IIFE）</strong> 为经典示例，将每次事件之行后变量 <code>i</code> 的值保留到定时器的回调函数中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 闭包 - IIFE</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 1 2 3 4 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h4><p>ES6 对于函数扩展新增了箭头函数 <code>() =&gt;</code> ，简化了函数表达式和回调函数的书写。 但需要留意以下几点：</p>`,29),N=n("li",null,[s("没有自身的 "),n("code",null,"this"),s(" 绑定，而是继承其所在上下文的 "),n("code",null,"this"),s(" 值")],-1),z=n("li",null,[s("没有自身的 "),n("code",null,"this"),s(" 绑定， 因此不能作为构造函数")],-1),M=n("code",null,"arguments",-1),U={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters",target:"_blank",rel:"noopener noreferrer"},B=n("li",null,[s("不可使用 "),n("code",null,"yield"),s(" 指令，因此不能作为 "),n("code",null,"Generator"),s(" 函数")],-1),W=n("li",null,[s("返回对象时，"),n("strong",null,"必须用扣号包裹")],-1),Z=n("li",null,[s("箭头函数不存在原型（打印结果为："),n("code",null,"undefined"),s("）")],-1),K=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">arrowFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window</span>
  <span class="token comment">// console.log(agruments); throw ReferenceError: agrument is not defined</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>
<span class="token punctuation">}</span>
<span class="token function">arrowFn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrowFn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">new</span> <span class="token class-name">arrowFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: arrowFn is not a constructor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function H(Q,X){const e=o("ExternalLinkIcon");return c(),i("div",null,[u,n("div",r,[d,n("p",null,[s("JS 引擎有 "),k,s(" 的 "),n("a",v,[m,s(),t(e)]),s("、 "),b,s(" 的 "),g,s(" 等各浏览器厂商基于 "),f,s(" 标准实现。但部分实现上亦存在细节上的差异，如 "),h,s(" 执行顺序可能并不一致。笔者实践上以 "),y,s(" 为主。")])]),_,w,j,n("div",x,[q,n("p",null,[n("a",S,[E,s(),t(e)]),s(" 通过调用 JS 解释器执行代码，拥有调用者权限，容易导致网站遭受恶意攻击，应避免使用")])]),C,n("div",T,[A,n("ol",I,[n("li",null,[s("在函数上下文中，初始化时将创建只包括 "),n("a",J,[s("arguments"),t(e)]),s(" 对象的"),V,s("（"),L,s("，"),O,s("）并将其作为变量对象")])])]),R,n("p",null,[s("在 ES6 中新增了 "),F,s(" 与 "),P,s(" 用于声明变量，并有以下"),n("a",D,[s("标准"),t(e)]),s(":")]),G,n("ul",null,[N,z,n("li",null,[s("不可使用 "),M,s(" 对象，需要用 "),n("a",U,[s("rest parameters"),t(e)]),s(" 参数代替")]),B,W,Z]),K])}const $=p(l,[["render",H],["__file","execution.html.vue"]]);export{$ as default};
